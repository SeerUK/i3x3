// Code generated by protoc-gen-go. DO NOT EDIT.
// source: i3x3.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	i3x3.proto

It has these top-level messages:
	DaemonCommand
	DaemonCommandResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// DaemonCommand represents a command message for i3x3d to process.
type DaemonCommand struct {
	Direction string `protobuf:"bytes,1,opt,name=direction" json:"direction,omitempty"`
	Move      bool   `protobuf:"varint,2,opt,name=move" json:"move,omitempty"`
	Overlay   bool   `protobuf:"varint,3,opt,name=overlay" json:"overlay,omitempty"`
}

func (m *DaemonCommand) Reset()                    { *m = DaemonCommand{} }
func (m *DaemonCommand) String() string            { return proto1.CompactTextString(m) }
func (*DaemonCommand) ProtoMessage()               {}
func (*DaemonCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DaemonCommand) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *DaemonCommand) GetMove() bool {
	if m != nil {
		return m.Move
	}
	return false
}

func (m *DaemonCommand) GetOverlay() bool {
	if m != nil {
		return m.Overlay
	}
	return false
}

// DaemonCommandResponse represents the result of a command for i3x3overlayd.
type DaemonCommandResponse struct {
	Target uint64 `protobuf:"varint,1,opt,name=target" json:"target,omitempty"`
}

func (m *DaemonCommandResponse) Reset()                    { *m = DaemonCommandResponse{} }
func (m *DaemonCommandResponse) String() string            { return proto1.CompactTextString(m) }
func (*DaemonCommandResponse) ProtoMessage()               {}
func (*DaemonCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DaemonCommandResponse) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func init() {
	proto1.RegisterType((*DaemonCommand)(nil), "proto.DaemonCommand")
	proto1.RegisterType((*DaemonCommandResponse)(nil), "proto.DaemonCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DaemonService service

type DaemonServiceClient interface {
	HandleCommand(ctx context.Context, in *DaemonCommand, opts ...grpc.CallOption) (*DaemonCommandResponse, error)
}

type daemonServiceClient struct {
	cc *grpc.ClientConn
}

func NewDaemonServiceClient(cc *grpc.ClientConn) DaemonServiceClient {
	return &daemonServiceClient{cc}
}

func (c *daemonServiceClient) HandleCommand(ctx context.Context, in *DaemonCommand, opts ...grpc.CallOption) (*DaemonCommandResponse, error) {
	out := new(DaemonCommandResponse)
	err := grpc.Invoke(ctx, "/proto.DaemonService/HandleCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DaemonService service

type DaemonServiceServer interface {
	HandleCommand(context.Context, *DaemonCommand) (*DaemonCommandResponse, error)
}

func RegisterDaemonServiceServer(s *grpc.Server, srv DaemonServiceServer) {
	s.RegisterService(&_DaemonService_serviceDesc, srv)
}

func _DaemonService_HandleCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).HandleCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DaemonService/HandleCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).HandleCommand(ctx, req.(*DaemonCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaemonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DaemonService",
	HandlerType: (*DaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleCommand",
			Handler:    _DaemonService_HandleCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "i3x3.proto",
}

func init() { proto1.RegisterFile("i3x3.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x34, 0xae, 0x30,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd1, 0x5c, 0xbc, 0x2e, 0x89,
	0xa9, 0xb9, 0xf9, 0x79, 0xce, 0xf9, 0xb9, 0xb9, 0x89, 0x79, 0x29, 0x42, 0x32, 0x5c, 0x9c, 0x29,
	0x99, 0x45, 0xa9, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x08,
	0x01, 0x21, 0x21, 0x2e, 0x96, 0xdc, 0xfc, 0xb2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x8e, 0x20,
	0x30, 0x5b, 0x48, 0x82, 0x8b, 0x3d, 0xbf, 0x2c, 0xb5, 0x28, 0x27, 0xb1, 0x52, 0x82, 0x19, 0x2c,
	0x0c, 0xe3, 0x2a, 0xe9, 0x73, 0x89, 0xa2, 0x18, 0x1e, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c,
	0x2a, 0x24, 0xc6, 0xc5, 0x56, 0x92, 0x58, 0x94, 0x9e, 0x5a, 0x02, 0xb6, 0x81, 0x25, 0x08, 0xca,
	0x33, 0x0a, 0x81, 0xb9, 0x26, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x99, 0x8b, 0xd7,
	0x23, 0x31, 0x2f, 0x25, 0x27, 0x15, 0xe6, 0x3c, 0x11, 0x88, 0xf3, 0xf5, 0x50, 0xcc, 0x95, 0x92,
	0xc1, 0x26, 0x0a, 0xb3, 0x2d, 0x89, 0x0d, 0x2c, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xba,
	0xed, 0x43, 0xaa, 0xff, 0x00, 0x00, 0x00,
}
